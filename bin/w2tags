#!/usr/bin/env ruby
# The command line W2tags parser.
#  How to WaytoTags:
#  ~~~~~~~~~~~~~~~~~~~~~~~
#  syntax:
#  w2tags [*.w2erb] [-a] [-d:*opt*]
#  OR
#  w2tags [file1,file2,file3] [-b] [-d:*opt*]
#
# example:
# 1. w2tags -a                #=> translate all file with ext: w2erb
# 2. w2tags *.w2erb -a        #=> translate all file with ext: w2erb
# 3. w2tags fl.w2erb          #=> translate a file
# 4. w2tags fl.w2erb -b       #=> translate a file with no initialize/finalize
# 5. w2tags fl.w2erb -d:parse #=> translate with debug parser
# 6. w2tags fl.w2erb -d:const #=> translate with debug constanta
# 7. w2tags fl.w2erb -d:stack #=> translate with debug stack indentation
# 8. w2tags -try              #=> Test W2tags using Sinatra http://localhost:4567/
# 9. w2tags -irb              #=> Start IRB with   W2 as instance object of W2Tags
# 10.w2tags -rails            #=> Copy w2scaffold Rails and set environment.rb
# 11.w2tags -tags2w           #=> Parsing erb to w2tags
#
#  Enjoy... 

require File.expand_path(
        File.join(File.dirname(__FILE__),%w[.. lib w2tags]))
wpath=  File.dirname(__FILE__).gsub(/bin$/,'')

def howto_w2tags
puts <<END

How to WaytoTags:
~~~~~~~~~~~~~~~~~~~~~~~
syntax:
w2tags [*.w2erb] [-a] [-d:*opt*]
OR
w2tags [file1,file2,file3] [-b] [-d:*opt*]

example:
1. w2tags -a                #=> translate all file with ext: w2erb
2. w2tags *.w2erb -a        #=> translate all file with ext: w2erb
3. w2tags fl.w2erb          #=> translate a file
4. w2tags fl.w2erb -b       #=> translate a file with no initialize/finalize
5. w2tags fl.w2erb -d:parse #=> translate with debug parser
6. w2tags fl.w2erb -d:const #=> translate with debug constanta
7. w2tags fl.w2erb -d:stack #=> translate with debug stack indentation
8. w2tags -try              #=> Test W2tags using Sinatra http://localhost:4567/
9. w2tags -irb              #=> Start IRB with   W2 as instance object of W2Tags
10.w2tags -rails            #=> Copy w2scaffold Rails and set environment.rb
11.w2tags -tags2w           #=> Parsing erb to w2tags

Enjoy... 
END

end

arg = ARGV 
if arg.size>0
  arg = ['w2erb'] + arg if arg.size==1 && arg[0]=='-a'
  puts 'ARGV : '+arg.join(" ")
  puts arg[1]
  
    W2 = W2Tags::Parser.new

  x = arg.select {|s|s[0,3]=='-d:'}
  #  W2.dbg[:stack] = (x.size==0)  
  x.each do |s|
      W2.dbg[:parse]    = true if s=='-d:parse'
      W2.dbg[:stack]    = true if s=='-d:stack'
      W2.dbg[:const]    = true if s=='-d:const'
      W2.dbg[:show_hot] = true if s=='-d:show_hot'
  end
  
  if arg[0]=='-try'
     require File.expand_path(
             File.join(File.dirname(__FILE__),%w[.. lib w2tags try try]))
             Sinatra::Application.run! 
  elsif arg[0]=='-irb'
    ARGV.shift
    
    class Object
      def w2(str)
        rtn =   W2.parse_line(str)
        puts rtn
      end
    end

    require 'irb'

    puts <<EOF
Your W2Tags instance object stored in   W2
Ex: puts   W2.parse_line "#content\\n  %span.say Hello"
Shortcut w2, example:
1.9.3p125 :001 > w2 <<EOF
1.9.3p125 :002 > #content
1.9.3p125 :003 >   %span.say Hello
1.9.3p125 :004 > EOF
=>/Users/wharsojo/.rvm/gems/ruby-1.9.3-p125@gems/gems/w2tags-0.9.68/hot/erb.hot
<div id="content">
  <span class="say">Hello</span>
</div>
=> nil 
EOF

    IRB.start      
  elsif arg[0]=='-rails'
    if !File.exist?('vendor/plugins')
      puts 'No Folder: vendor/plugins...'
    elsif !File.exist?('config/environment.rb')
      puts 'No File: config/environment.rb...'
    else
      ttl_copy = 0
      require 'fileutils'
      Dir[wpath + "plugins/**/*"].each do |fl|
        if !File.directory?(fl)
          path= fl.gsub(/.*\/plugins\//,'vendor/plugins/')
          dir = File.dirname(path)
          FileUtils.mkdir_p(dir) if !File.exist?(dir)
          if !File.exist?(path)
            ttl_copy += 1
            puts "Copy w2tags plugins for rails..." if ttl_copy==1
            puts "=> #{fl.gsub(/.*\/w2tags\//,'')}"
            File.open(path, 'wb') { |file| file.write(File.read(fl)) }
          end
        end
      end
      ttl_copy = 0
      Dir[wpath + "hot/rails/**/*"].each do |fl|
        path= fl.gsub(/.*\/rails\//,'')
        if !File.exist?(path)
          ttl_copy += 1
          puts "Copy w2tags HOT files..." if ttl_copy==1
          puts "=> #{path}"
          File.open(path, 'wb') { |file| file.write(File.read(fl)) }
        end
      end
      content = File.read('config/environment.rb')
      ori= content.length
      content << "\nrequire 'w2tags'" if /\n *require *\'w2tags\'/ !~ content
      content << "\nrequire 'w2tags/rails_hook'" if /\n *require *\'w2tags\/rails_hook\'/ !~ content
      if ori != content.length
        puts 'Update config/environment.rb...'
        File.open('config/environment.rb', 'wb') { |file| file.write(content) }
      end
      puts(<<END)

FINISH W2TAGS for RAILS...
You can try w2scaffold:

script/generate w2scaffold post title:string body:text published:boolean
rake db:migrate
script/server

END
    end
  elsif arg[0]=='-tags2w'
    require 'tags2w'
    t2t = MakeTag.new
    t2w = Tags2w.new
    fls = Dir['./**/views/**/*.erb']
    fls = Dir['./**/*.erb'] if fls==[]

    fls.each do |f|
      puts f
      lines= IO.read(f).delete("\r").split("\n")
      t2t.make_it(lines)
      if arg[1]=='-debug'
        File.open(f.gsub('.erb','.w1erb'),'w') do |wr|
          wr << lines.join("\n")
        end
      end
      #hp = Hpricot(lines.join("\n"))
      hp =Hpricot::XML(lines.join("\n"))
      t2w.start(hp).line_code
      File.open(f.gsub('.erb','.w2erb'),'w') do |wr|
        wr << t2w.result.join("\n")
      end
    end
  else
    case arg[1]
    when '-a' ;
       fls = Dir["./**/views/**/#{arg[0]}"]
       fls = Dir["./**/#{arg[0]}"] if fls==[]
       #  W2.parse_files(Dir["*.#{arg[0]}*"]) 
         W2.parse_files(fls) 
    when '-b' ;  W2.parse_files(arg[0].split(','),false)
    else      ;  W2.parse_files(arg[0].split(','))
    end
  end
else
  howto_w2tags
end
