= Change Log

Below is a complete list of changes for each revision of W2TAGS.

== 0.9.69

=== Parser
  * fix bug at line: 932

== 0.9.68

=== Command line
  * refactor the command paramters
  * shortcut change from WH => W2
  * shortcut change from w2 => w2
  * shortcut w2 return nil

== 0.9.67
  
=== Parser
  * New Var-Constanta in HOT - "$=" 
  * Splitter ':' in hot params

==== New Var-Constanta in HOT - "$=", this var fix the need of reconstruct Key-attributes to the tag
with costume attribute 

  -# Example
  
  >>_menu
  %div$${editor="eclipse" *@}$= $0

  >>>W2TAGS>>>
  -menu.dor{style="font:bold;"}== 0
  
  <div class="dor" editor="eclipse" style="font:bold;"><%= "0" %></div>

==== Parameter in hot support splitter ':' to enhance the parameter manipulation
 
  -# Example:

  >>_a
  %a$${href="$0.split(':')[1].to_s.strip~" *@}$= $0.split(':')[0].to_s.strip~ 

  %a$${href="$0:1" *@}$= $0:0 

Two command above will produce the same result

  -a.dodol.garut{style="blue"}= \
    Wow  : #     ;\
    Home : /     ;\
    Next : /next
  
  -a.dodol.garut{style="background:blue;"}= \
  Wow  : #     ;\    Home : /     ;\
  Next : /next

  <a class="dodol garut" href="#" style="background:blue;"><%= Wow %></a>
  <a class="dodol garut" href="/" style="background:blue;"><%= Home %></a>
  <a class="dodol garut" href="/next" style="background:blue;"><%= Next %></a>

== 0.9.66

=== Parser
  * Auto closing tag in HOT now properly indented

==== Auto closing tag in HOT now properly indented
this example show how we redefine the tag %script to automatically 
generate <script *all**@type="text/javascript" charset="utf-8">, with
xhtml comment and line below this tag must not be parse

  -# Example:
  >>script
  <script *all**@type="text/javascript" charset="utf-8">
  %script_end
  -!

  >>script_end
  <</
  </script>

  >>_script_tag
  %script
    //<![CDATA[
    ==$0;
    //]]>

  >>>W2TAGS>>>
  -script_tag var instant= '#{@line}'

Result of w2tags command above will be xhtml tag below with proper indentation 

  <script type="text/javascript" charset="utf-8">
    //<![CDATA[
    <%= "var instant= '#{@line}'" %>;
    //]]>
  </script>

== 0.9.65

=== Parser
  * small refactor parser including regexp
  * source code w2tags now can embed hot file
  * nexttag '^' now implement '*' but for reassign still using '~^'
  * nexttag now can redefine/create new global nexttag
    
==== embed hot file in w2tags code

  -# Example:
  >>_cok
   %cooook$$ $0
  >>>W2TAGS>>>
  %tr
    ^.c1 column1
    *.c2 column2

  <tr>
    <th class="c1">column1</th>
    <th class="c2">column2</th>
  </tr>

==== Redefine/create new global nexttag
  
  -# Example:
  ~^%tr%td.wheel $0
  %tr
    * roda1
    * roda2
    
  <tr>
    <td class="wheel">roda1</td>
    <td class="wheel">roda2</td>
  </tr>
    
==== Parsing nexttag '^' now support w/o params

  -# Example:
  %table
    %tr
      ^.c1 column1
      ^.c2
        .last
          %b goood

  <table>
    <tr>
      <th class="c1">column1</th>
      <th class="c2">
        <div class="last">
          <b>goood</b>
        </div>
      </th>
    </tr>
  </table>

== 0.9.64

=== Parser
  fix loading hot file 

== 0.9.63

=== Parser
  fix bug for clean-up result if @doc_out is empty
  
== 0.9.62

=== Parser
  clean-up result if hot contains multiple linefeed "\n\n"

== 0.9.61

=== Parser

==== Parsing "Key-Attribute" change the sequence parsing from left to right
from attribute "name(:)","id(#)","class(.)","constanta(&)". After parsing 
we have a list of Var-Constanta in HOT with value

  Example:

  %div&joel:name#id.class&constanta{op="atribute"}== info

  $$     => All Key-Attribute before Custome-Attribute ( :name#id.class&constanta )
  $@     => All Key-Attribute from   Custome-Attribute ( {op="atribute"}==  )
  $:     => name-Variable      ( :name  )
  $#     => id-Variable        ( #id    )
  $.     => class-Variable     ( .class )
  $&     => Constanta-Variable ( &joel  )
  *:     => name-Value         ( name   )
  *#     => id-Value           ( id     )
  *.     => class-Value        ( class  )
  *&     => constanta-Value    ( joel   )
  *@     => attribute          ( op="atribute" )
  *name* => name-attribute     ( name="name"   )
  *id*   => id-attribute       ( id="id"       )
  *class*=> class-attribute    ( class="class" )
  *att*  => attribute          ( op="atribute" )
  *all*  => all-attribute      ( name="name" id="id" class="class" op="atribute" )

to passing All Key-Attribute like example

  OLD:
  ~~~~
  %div$$

  NEW:
  ~~~~
  %div$$$@
  
and we will have a nice interpolation like code below:

  %div$$&rec$@
  
== 0.9.52

=== Parser

Change for auto include hot, if w2tags instance without params run as 
usual, but if supply with params (hot file name without ext), it will
overwrite auto-hot from params

=== Rails Hook

It will auto-hot 'rails.hot' (inside will include html,erb_base), but 
remember when your source include hot (ex: !hot!dodol), loading sequence
are: dodol.hot, html.hot, erb_base.hot

=== HOT

consolidate HOT to simplify the loading

== 0.9.5

=== Command line

Help Information change from w2html to w2erb, for params like

  w2tags *.w2erb -a 
  
it will parse all w2tags type 'erb' from folder view or if not found, 
it will parse from current folder down to child folder

=== tags2w

using index (not find_index), for compactible with ruby version 1.8.6

=== Parser

Include Source now doesn't have default ext (.w2ex), for easy maintenace
of source code.

  !inc!partial.w2erb

Remember command / Next command have multi class for parameters convert 
to multiple line 

  %table
    %tr
      ^.c;.r No;Info
  	  
  <table>
    <tr>
      <td class="c">No</td>
      <td class="r">Info</td>
    </tr>
  </table>

=== Add Condition Hook for Sinatra 0.9.2

Since sinatra change again method of "lookup_template", the Hook must add another
condition Hook. 
Sinatra Hook update, it a same behaviour with Rails

=== block_hot

add a block for hot so you can put your hot block inside your code (embed) mean 
that you hot is only for this code only

=== tags2w

Fix: html - erb with ruby sanitize code: "<%-  -%>"

=== HOT files

==== erb.hot

add tag "%comment" since reverse erb to w2tags (tags2w) use this tag and it must 
be play nice (no parsing inside it).

change form_tag, form_to, using block var 

== 0.9.4

=== Tags To W (Reverse parse to w2tags)

Implement Reverse parse to w2tags, it use Hpricot::XML and it cover standard
or basic reverse parse, for css and block of js not include (one day hack).

=== HOT files

==== erb.hot

add condition for unless

==== html.hot

Fix old template for "initialize"

=== Parser

==== Update Debug parser

debug parser for uniq Var update to standarize with others -d:parser

==== Update Regex for "reHot"

to cover inline w2tags, if inline w2tags include all Key-Variable it fail
since "reHot" use greedy regex, now fix with non greedy.

== 0.9.3

=== Pass test on Linux Ubuntu 8.10 and win32

test for 57 assertions on:

  Linux Ubuntu 8.10 Ruby 1.8.x
  Win32 Ruby 1.9.1

=== Fix Compatible between ruby 1.8.x and 1.9.1

  "test var"[-1]   # only work on ruby 1.9.1 
  "test var"[-1,1] # worked!

=== Split Code to new file for w2tags Block not parsing 

When I need to implement Sass Parser on w2tags Block not parsing
its best way to seperate to new file for (plain_text, remark, sass).

=== Implement Simple Sass Parser

Its my need for simple Sass Parser, focus on DRY up the Sass code,
calculation color, global variable not implement. 

=== update erb.hot

now you can make "a href" more readable with var in Key-Variable

  OLD:
  ~~~~
  >>_a
  %a$${href="#"} $*

  NEW:
  ~~~~~
  >>_a
  %a$${href="*&"} $*

  -a&/ Home          => <a href="/">Home</a>
  -a&/post/edit Edit => <a href="/post/edit">Edit</a>
  
== 0.9.1

=== Run on IRB

  C:\>w2tags -irb
  ARGV  : -irb

  Your W2Tags instance object stored in WH...
  Ex: puts WH.parse_line("#content\n  %span Hello")
  Shortcut command => wh("#content\n  %span Hello")

  irb(main):001:0> wh(<<END)
  irb(main):002:0" #wow
  irb(main):003:0"  #kereen
  irb(main):004:0"   %span Hello World
  irb(main):005:0" END
  =>C:/mingw/lib/ruby/gems/1.9.1/gems/w2tags-0.9.1/hot/html.hot
  <div id="wow">
   <div id="kereen">
    <span>Hello World</span>
   </div>
  </div>
  => nil
  irb(main):006:0>
  
=== Changes in parser

==== Add InLine Parsing (%tag text%)

that's the first question came in FAQ on HAML, and I think this 
implementation fit in my brain and it cover the Key-Variable too.
Lets see some example from minimal inline to inline with Key-Variable:

  I Like (%b cake%)!
  I Like (%span.b cake%)!
  I Like (%strong.bold{banana="boys"} a(%i.italic cake%)%)!

  I Like <b>cake</b>!
  I Like <span class="b">cake</span>!
  I Like <strong class="bold" banana="boys">a<i class="italic">cake</i></strong>!

==== Var $$ in HOT now implement full Key-Variable
  
==== Var \*all\* in HOT now implement full Attribute from Key-Variable

==== List Var-Constanta available in HOT

this is list Var-Constanta in HOT with value 

  Example:

  %div&joel:name#id.class{op="atribute"}== info

  $$     => full Key-Variable  ( :name#id.class{op="atribute"}== )
  $&     => Variable for HOT   ( &joel )
  $:     => name-Variable      ( :name )
  $#     => id-Variable        ( #id )
  $.     => class-Variable     ( .class )
  $@     => attribute-Variable ( {op="atribute"} )
  *&     => Variable for HOT   ( joel )
  *:     => name-Variable      ( name )
  *#     => id-Variable        ( id )
  *.     => class-Variable     ( class )
  *@     => class-Variable     ( op="atribute" )
  *att*  => attribute-Variable ( op="atribute" )
  *all*  => all-Variable       ( name="name" id="id" class="class" op="atribute" )
  *name* => name-Variable      ( name="name" )
  *id*   => id-Variable        ( id="id" )
  *class*=> class-Variable     ( class="class" )

==== Add Debug:Parser for some Block

Now Block of Plain-Text, Remark, and line of Plain-Text will show on Debug:Parser

==== Add Key-Variable "$&", and "*&" (method nameidclass_var)

this Variable use only on HOT, the purpose is sometime when it need DRY-ing tags
(like input), it need more params ( > 1 ) but since the design decission of w2tags 
if params only 1 ($0), it repeatable but it more than that it not repeatable.
Syntax:

  Ex: 
  %li&joel:on#soft.ware list

==== Change in Parsing Key-Variable (method nameidclass_var)

Key-Variable are attribute attach to tag like :name, #id and .class and now 
you can assign that id without value

  %input:address#.light/    ### or ####
  :address#.light/
  :#.light/
  
  <input name="address" class="light"/>
  <input name="address" class="light"/>
  <input class="light"/>


this behaviour is need-it to overcome :name have a value of .class

  :user.address#.light/
  
  <input name="user.address" class="light"/>
  
==== HOT parser should not parse modifier of the next-tag "~^"

Modifier of the next-tag "~^" some time include internal var, Key-var
and if the modifier inside HOI it shuld not be parse.

==== Change Var "&tag" to "$tag"

Var Available when parsing HOT and it not intended to use on script, it use 
only in HOT so, it should be as internal var ( prefix with "$" or "*" )

==== Removing char now using delete method

  Ex:
  ":this#line\r\n".delete("\n") 

==== Remove #comment legacy code


==== Change in Plain-Text

line start of Plain-Text (block will not be parse) now removed if no text 
inside the command

  #content
    -! 
     #this is text only
     
  <div id="content">
     #this is text only
  </div>

  #content
    -! wow
     #this is text only
     
  <div id="content">
     wow
     #this is text only
  </div>
  
== 0.9.0

Leap Frog Update since it take dozen update to cover some of the quirk
found after testing the parser with combination and some of the design
(redesign) w2tags to make it much natural if I see it again.

=== Add TEST

now you can test the parser, it will grow when I have time to add to it or you can
email me for some test / change test that produce valid / error test to me.

=== Rename HTM.HOT to HTML.HOT

I think its natural...

=== Changes in sinatra_hook

remove checking for PLANFORM (due bug in sinatra but now fix)

=== Changes in parser

==== Change Variable to make it easy see patern

  REMOVE             REMAIN / ADD
  @mem_var['*opt*']  @mem_var['$$']  :name#id.class{attr="optional"}
                     @mem_var['$@']  {attr="optional"}
                     @mem_var['*@']   attr="optional"

==== HOT now implement full key-attribute

  %li:name#id.class{oth="attribute"} html 
  
  -li:name#id.class{oth="attribute"} html 

==== @doc_out - line RIGHTSTRIPED

  to make it standard for writing test

==== change behaviour parse_line()

  old:parse_line(row,init=nil)
  new:parse_line(row,init=true)
  
and debug parsing = false since focus now for the test, for 
running on irb you just do:
  
  W2TAGS = W2Tags::Parser.new
  W2TAGS.dbg[:parse] = true

==== add parser for shortcut input (just like div)

since the implementation for name is there and usable for form and the form it self
commonly consist many of input tag, and inside that have attribute name, why not
implement it...

  :test#wow.kereen{mak="nyos"} test
  
  <input name="test" id="wow" class="kereen" mak="nyos">test</input>

==== update implementation of parse_set_var() / uniq var

now it will show the natural string of uniq value

  @myvar=one;two;three
  @myvar=five;one;two
  %ul
    ^ @myvar!

  <ul>
    <li>one</li>
    <li>two</li>
    <li>three</li>
    <li>five</li>
  </ul> 

==== rename method from "inside_rmk()" to "inside_remark()"

==== update regex and implementation of parse_set_mem()

  old:/([ \t]*~\^)([^`\n]+)(`|\n)/
  new:/([ \t]*~\^)([^\n]+)(\n)/
  
no need to add params for re-define shortcut
  
Ex: 

  ~^%li.wclass
  
Produce:

  @mem_tag["^"] = "%li.wclass $0\n" 
  
==== update regex and implementation of parse_get_mem()

  old:get_mem(/([\^])([^ ]+)\{([^\}]*)\}([^`\n]*)(`|\n)/) ? true : \
  old:get_mem(/([\^])([^ ]+)([^`\n]*)(`|\n)/)
  new:get_mem(/([\^])([^ ]* )([^\n]*)(\n)/)
  
now you can have :name #id or .class after shortcut (remember! must be w/o spaces)

Ex:

  %ul
    ^.wc withclass
    
  <ul>
    <li class="wc">withclass</li>
  </ul>

=== Add W2TAGS.rdoc

this guide are for explain commands found in W2TAGS and show some code-snipets
and some of pre-define patern and behaviour of each commands.

=== Changes in HOT.rdoc

Add information for new feature and change behaviour for:

New Features:
  =$0  to =$9    Ruby Code
  ==$0 to ==$9   Ruby String Code

Change bahaviour of Variable interpolation
  

=== Changes in README.rdoc

Fix Sample Code

=== Undocumented VAR now documented

  @mem_var['$me']        my nick name
  @mem_var['$basepath']  current path

== 0.8.6

=== Changes in sinatra_hook.rb

Hook for Sinatra < 0.9.x and Sinatra > 0.9.x

=== Changes in htm.hot

swap / switch code between:
  >>js   >>_js
  >>css  >>_css

=== Changes in parser

==== update regex for merge_hot (!hot!)

Search folder are: running-ruby-script, source-w2tags, library-w2tags

==== update regex for merge_w2x (!inc!)

Compatible running on Win32 or Linux, not yet test on Mac. when the source w2tags
code in win32 and open in Linux, there been conflict on line-end since in Linux
source code from win32 not translate properly (need manually remove the CR) 

== 0.8.5

=== Changes in htm.hot

params value always be trim/strip, no need to interpolation the "dollar",so you 
can code like this:
    
  -js jquery;jquery.listen
  
  <script type="text/javascript" src="jquery.js" > </script>
  <script type="text/javascript" src="jquery.listen.js" > </script>

  >>_css
  old: <link rel="stylesheet" href=" :strip$0.css" type="text/css" media="screen, projection" />
  new: <link rel="stylesheet" href="$0.css" type="text/css" media="screen, projection" />

  >>_js
  old: <script type="text/javascript" src=" :strip$0.js" > </script>
  new: <script type="text/javascript" src="$0.js" > </script>

=== Changes in erb.hot

   >>_each2
  old: $0.each_with_index do |r,i|
  new: $0.each_with_index do |$1|
  
  >>_eachs
  new: $0.sort.each do |$1|

  >>_a
  new: %a{href="#"}$$ $*

  >>_a2
  new: %a{href="<%= $1 %>"}$$ $0

=== Changes in parser

==== update regex for !inc!

now you can specify path for include source

  ex:
  !inc!../partial/paginate

  old: /!inc![ ]?([\w.]+)([`\n])/
  new: /!inc![ ]?([\/\w._]s+)([`\n])/

==== update inline doc

add and update inline doc, some of the documentation need correct documentation
and I need feedback to get proper inline documentation 

==== property "ext"

for testing, it will auto loading HOT files and default ext is "htm", and
now you can change the ext and auto loading will perform correctly.

==== lookup auto loading HOT changes (merge_tags)

now it will search in current folder if it not found it will search to gems
folder of w2tags/hot. 

==== w2tags command last params with char "<"

now it support end of tag not automatically close when last params with char "<"

  %div my div<
    %div other div
    
  <div>mydiv
    <div>other div</div>
  </div>
  
==== parse_set_var 

value will be trim down 

  &var= value
  @var= value2
  %div &var!
  %div @var!
  
  <div>value</div>
  <div>value2</div>

==== get_dollar / fix auto repeat line 

change behaviour "auto repeat" line 

  >>_li
  %li ~:capitalize$0

  %ul
    -li one;two
  
  <ul>
    <li>One</li>
    <li>Two</li>
  </ul>
  
==== Change Regex for get_dollar (default value)

  old: Regexp.new('~([^~]+)~\\'+x)
  new: Regexp.new('~:([^$]+)\\'+x)

=== Change Variable for name, id, class ( *: , *# , *. )

when you put command like: 

  %div:name#id.class myhtml
  
it will be save in these variable

  @mem_var['$:'] = ":name"  
  @mem_var['*:'] = "name"  
  @mem_var['$#'] = "#id"  
  @mem_var['*#'] = "id"  
  @mem_var['$.'] = ".class"  
  @mem_var['*.'] = "class"  

== 0.8.4

=== Sinatra Hook
last commit not include

=== Changes in parser
  
==== Now Parser can be test in IRB

  irb -rubygems -rw2tags
  >  p=W2Tags::Parser.new
  
  >  p.parse_line '%h1 title'
  => [<h1>title</h1>\n]
  
  >  p.parse_line '%h1#main{op="head"} title'
  => [<h1>title</h1>\n, <h1 id="main" op="head">title</h1>\n]
  
==== Add Default Value for ~def_value~*var*

inside hot you can make a default value for predefine var. Ex:

  >>_li
  %li{~name="widi"~*att*}
  
  %li line 1
  %li{name="arie"} line 2
  
  <li name="widi">line 1</li>
  <li name="arie">line 2</li>
  
predefine var effected are:
  
  *att*, *all*, *opt*, *id*, *name*, *class*, *code*

==== Change Regex for HOT

  1. old:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)()~([^\n]*)\n/
     new:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)~([^\n]*)\n/
  2. old:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)\{([^\}]*)\}~([^!=])/
     new:    /(%)([!]?[ \t\$\w\-\/:#.%=]+\{[^\}]*\})~([^!=]*)\n/
     
==== Change Regex for get_dollar (default value)

  old: Regexp.new('~([\w]*)~\\'+x)
  new: Regexp.new('~([^~]+)~\\'+x)

==== Parser for :name#id.clas now include {attribut} and new var
parsing in w2tags and hot for {attribute} merge into method "idclass_var"
so it must change hot regex with the same params regex ($1,$2,$3)

variable *opt* is the same with $$

==== Syntax patern for Shortcut HOT is the same with w2tags command

ex: below an example shortcut HOT "-button" and how you write in source-code

  ### in HOT ###
  >>_button
  %button$${*att* ~label="$0"~}/

  ### command in source: ###
  -button{disabled="true"} Red
  -button{disabled="true" label="Red"} 
  %button{disabled="true" label="Red"}/
    
  -button:def#key.hlite{disabled="true" num="1"} Red
  
  ### result ###
  <button disabled="true" label="Red"/>
  <button disabled="true" label="Red"/>
  <button disabled="true" label="Red"/>
  <button name="def" id="key" class="hlite" disabled="true" num="1" label="Red"/>
  
== 0.8.3

=== Sinatra Hook

if your framework is Sinatra, now it have "hook" on it.
I'm forking blog "Scanty" create by "Adam Wiggins"
and this is how I do it in Scanty ("main.rb"):

  require 'rubygems'
  require 'sinatra'
  require 'w2tags'
  require 'w2tags/sinatra_hook' 

=== Changes in parser

==== all debug are off

before that debug stack is on, and it slowdown parsing inside rails / merb / sinatra 

==== W2TAGS inline now have option for not inline 

if the last char of params have a char "\"

  %p inline
    some_chars
  %p not inline\
    some_chars
  
will result in 

  <p>inline</p>
    some_chars
  <p>not inline
    some_chars
  </p>

==== Change Regex for Parameters 

  1. optional      
     old: Regexp.new('\|([^$|\n]*)\\'+x+'([^\|\n]*)\|') # ex: |..$1..|
     new: Regexp.new('~([^$|\n]*)\\' +x+'([^\|\n]*)~')  # ex: ~..$1..~
  2. default       
     old: Regexp.new('\|([\w]*)\|\\'+x) # ex: |..|$1
     new: Regexp.new('~([\w]*)~\\'  +x) # ex: ~..~$1

==== Fix autoclosing not working if it inside another W2TAGS

the enhance of "Function HOT". It will scan the last line of the result
if it find <% end %> it wwill check that now processing %w[else elsif]
end remove the <% end %>. Remember, it need define in HOT:

  >>_if
  >>_else
  >>_elsif
  >>_end
  
you can check into "erb.hot"

=== Changes in HOT

==== erb.hot

  old: >>_each   ### become ###
  new: >>_each2
  
  new: >>_each
       !/
       $0.each do |$1|
       -end 

==== htm.hot

  >>_utf-8, >>_feed

== 0.8.2

=== HOT for erb restructure

now erb have 5 sub hot you can include in.

=== Change Regex for W2TAGS

  1. old:        /(%)([!]?[ \t\w:]+\{[^\}]*\}[#.=]?[^!]*)!([^`\n]*)([`\n])/
     new: /^[ \t]*(%)([!]?[ \t\w:]+\{[^\}]*\}[#.=]?[^!]*)!([^\n]*)([\n])/
  2. old:        /(%)([!]?[ \t\w:]+[#.=]?[^!]*)!([^`\n]*)([`\n])/          
     new: /^[ \t]*(%)([!]?[ \t\w:]+[#.=]?[^!]*)!([^\n]*)([\n])/          
     
=== Change Regex for HOT

  1. old:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)~([^\n]*)\n()/
     new:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)()~([^\n]*)\n/
  2. old:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)\{([^\}]*)\}([^!=])/
     new:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)\{([^\}]*)\}~([^!=])/

=== Change Next-Tags(W2TAGS)

old => new: 

      'html'  = '%!head!'                   => "%head $*\n"
      'head'  = '%!body!'                   => "%body $*\n"
      'ol'    = '%!li!$0'                   => "%li $0\n"  
      'ul'    = '%!li!$0'                   => "%li $0\n"  
      'dl'    = '%!dt!$0'                   => "%dt $0\n"  
      'dt'    = '%!dd!$0'                   => "%dd $0\n"  
      'dd'    = '%!dt!$0'                   => "%dt $0\n"  
      'select'= '%!option{value="$0" $1}!'  => "%option $0\n"
      'form'  = '%!input$0!/'               => "%input$0!/\n"
      'table' = '%!th!$0'                   => "%th $0\n"
      'tr'    = ? '%!th!$0' : '%!td!$0'     => ? "%th $0\n" : "%td $0\n"
      
=== Change Variable for code

  old: %code%
  new: *code*
  
=== fix regex for different OS

=== debug for constanta now behave like debug for hot

=== auto-close when indent is less then

now if you put line text (not a W2TAGS command) and the identation is less then prev, 
it will auto-close the tags.

=== end tags change

  old: ./ (dot   represent how many end tags from buffer to be pull out)
  new: ~/ (tilde represent how many end tags from buffer to be pull out)
      
== 0.8.1

=== Add more example 

if you have any example and want to contribute to the world, Please email me to:
  widi harsojo, wharsojo@gmail.com

=== Debug constanta now print after write ouput

this behaviour is the same for Debuging HOT. 
  
Change format of debuging in -d:parser, for HOT will print "<< -H-O-T-"

=== Line empty will be gone 

but if you want to preserve the line, you must put in inside <i>-!</i> block 
so it will not be parse and if you want remove the indentation ex: 
need for <b>pre</b>-tags, you must put in inside <i>-!!</i> block 

=== Change Regex for HOT

  1. old: /(%)([!]?[ \t\$\w\-\/:#.%=]+)~([^\n]*)\n()/
     new: /(%)([!]?[ \t\$\w\-\/:#.%=]+)()~([^\n]*)\n/
  2. old: /(%)([!]?[ \t\$\w\-\/:#.%=]+)\{([^\}]*)\}([^!=])/
     new: /(%)([!]?[ \t\$\w\-\/:#.%=]+)\{([^\}]*)\}~([^!=])/

=== Change Regex for shortcut_exec

  old: /(^[\t ]*)-([\w\-\/:#.%=]*) ([^\n]+)\n/
  new: /(^[\t ]*)-([\w\-\/:#.%=]*) *([^\n]*)\n/
  
=== Change Regex for shortcut_equal

  old: /(^[\t ]*)=([\w\-\/:#.%=]*) ([^\n]+)\n/
  new: /(^[\t ]*)=([\w\-\/:#.%=]*) *([^\n]*)\n/

=== Change Regex for get_hot_simple

  1. old: /^[\t ]*(%)([\$\w:#.=]+\{[^\}]*\}[#.=]?[^! ]* )([^\n]*)\n/
     new: /^[\t ]*(%)([\$\w\-:#.=]+\{[^\}]*\}[#.=]?[^~! ]* )([^\n]*)\n/
  2. old: /^[\t ]*(%)([\$\w:#.=]+\{[^\}]*\}[#.=]?[^! ]*)()\n/
     new: /^[\t ]*(%)([\$\w\-:#.=]+\{[^\}]*\}[#.=]?[^~! ]*)()\n/
  
=== Change Variable for name, id, class

when you put command like: 

  %div:name#id.class myhtml
  
this command will parse and put-it in those variable below, 
and this variable is use on HOT

  old: %all% - %opt% - %id% - %name% - %class%
  new: *all* - *opt* - *id* - *name* - *class*

=== Change Regex for Parameters 

  1. optional      
     old: Regexp.new('\[([^\$]*)\\'+x+'([^\]]*)\]')     # ex: [..$1..]
     new: Regexp.new('\|([^$|\n]*)\\'+x+'([^\|\n]*)\|') # ex: |..$1..| 
  2. default       
     old: Regexp.new('\[([^\$]*)\\'+x)  # ex: [..$1
     new: Regexp.new('\|([\w]*)\|\\'+x) # ex: |..|$1
  3. interpolation 
     old: Regexp.new(':([\w]+)\\'+x)
     new: Regexp.new(':([^$]+)\\'+x) #exe methh: :upcase:$1 
     
  x is for Parameters ex: $0, $1..$9
  .. meaning you can put char on it.

=== Change Assign Variable

Change in Assign Variable inside source code, but using it in HOT is the same

  1. assign on normal variable 
      old ex: &myvar!value
      new ex: &myvar=value
      /^[ \t]*(&[\w]+)=([^\n]+)([\n])/

  2. assign on unique variable
      old ex: @myvar!value1;value2
      new ex: @myvar=value1;value2
      /^[ \t]*(@[\w]+)=([^\n]+)([\n])/

== 0.8.0

* Initial public release.
