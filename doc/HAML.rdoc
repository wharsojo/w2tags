== W2TAGS mimics HAML command

w2tags mimics HAML command, these are my decission to make it easy for
users that already use HAML templating engines, but not all command implemented.

To new users on HAML, I think is not hard to understand of the HAML command, 
I'll explain basic of W2TAGS HAML like command on w2tags.

Rule of W2TAGS HAML like command are:

* begin with token ( /[ \t]*TOKEN/ ) of command
* indentations to make tag have a block of children-tag, or children-tag are
  element of tag with more spaces than parent tag.
* Auto closing will be added (from previouse tag) if indentations less spaces.
* Tags-Formating (%) have character that will represent an ID(#), CLASS(.),
  Attribute({}), Ruby Code(=), and Ruby String(==) or I call it Key-Variable.

List of HAML command. This list are the HAML command that token begin with:
  
  %  Tag formating 
  #  div formating with attribute id
  .  div formating with attribute class
  \  line text / no parsing
  -  translate to Ruby code
  =  translate to Ruby code
  == translate to Ruby String
  -# block remark / comment not include on result 
  -! block not parse

For details implementation, you must see on each explanation of these command below.

=== %  Tag Formating

==== Basic syntax ( %TAG )

  %ul
    %li List
    %li New
    
result:

  <ul>
    <li>List</li>
    <li>New</li>
  </ul>
    
==== Tag with ID ( %TAG#ID )

  %ul#menu
    
result:

  <ul id="menu">
  </ul>
    
==== Tag with CLASS ( %TAG.CLASS )

  %ul.main_side
    
result:

  <ul class="main_side">
  </ul>
    
==== Tag with ID CLASS ( %TAG#ID.CLASS )

  %ul#menu.main_side
    
result:

  <ul id="menu" class="main_side">
  </ul>
    
==== Tag with Attributes
  
this implementations is difference, on w2tags you type (inside "{}") it 
just like regular attribute must be type.

  %li.hot{line="1"} List
    
result:

  <li line="1" class="hot">List</li>

==== Tag with Shortcut to Ruby code (=)

  %div= @value
    
result:

  <div><%= @value %></div>
  
==== Tag with Shortcut to Ruby String (==)

  %div== #{@value}
    
result:

  <div><%= "#{@value}" %></div>
  
==== Rule of Combination

Combination of ID, CLASS, Attribute, and "Ruby", just follow from left to the right order, 
you can have all of this or you can ommit some of this, you can check example below:

Source:

  %div#menu.content.light/
  %div#id.class1.class2{row="1"}/
  %div#id.class1/
  %div#id.class2/
  %div#id{row="1"}/
  %div#id/
  %div.class1.class2{row="1"}/
  %div.class2.class1{row="1"}/
  %div.class1{row="1"}/
  %div.class2{row="1"}/
  %div.class1/
  %div.class2/
  %div{row="1"}/
  
Same as:
  
  #menu.content.light/
  #id.class1.class2{row="1"}/
  #id.class1/
  #id.class2/
  #id{row="1"}/
  #id/
  .class1.class2{row="1"}/
  .class2.class1{row="1"}/
  .class1{row="1"}/
  .class2{row="1"}/
  .class1/
  .class2/
  %div{row="1"}/

Result:

  <div id="menu" class="content light"/>
  <div id="id" class="class1 class2" row="1"/>
  <div id="id" class="class1"/>
  <div id="id" class="class2"/>
  <div id="id" row="1"/>
  <div id="id"/>
  <div class="class1 class2" row="1"/>
  <div class="class2 class1" row="1"/>
  <div class="class1" row="1"/>
  <div class="class2" row="1"/>
  <div class="class1"/>
  <div class="class2"/>
  <div row="1"/>
  
Source:

  %div#menu.content.light= Harsojo
  %div#id.class1.class2{row="1"}= Harsojo
  %div#id.class1= Harsojo
  %div#id.class2= Harsojo
  %div#id{row="1"}= Harsojo
  %div#id= Harsojo
  %div.class1.class2{row="1"}= Harsojo
  %div.class2.class1{row="1"}= Harsojo
  %div.class1{row="1"}= Harsojo
  %div.class2{row="1"}= Harsojo
  %div.class1= Harsojo
  %div.class2= Harsojo
  %div{row="1"}= Harsojo
    
result:

  <div id="menu" class="content light"><%= Harsojo %></div>
  <div id="id" class="class1 class2" row="1"><%= Harsojo %></div>
  <div id="id" class="class1"><%= Harsojo %></div>
  <div id="id" class="class2"><%= Harsojo %></div>
  <div id="id" row="1"><%= Harsojo %></div>
  <div id="id"><%= Harsojo %></div>
  <div class="class1 class2" row="1"><%= Harsojo %></div>
  <div class="class2 class1" row="1"><%= Harsojo %></div>
  <div class="class1" row="1"><%= Harsojo %></div>
  <div class="class2" row="1"><%= Harsojo %></div>
  <div class="class1"><%= Harsojo %></div>
  <div class="class2"><%= Harsojo %></div>
  <div row="1"><%= Harsojo %></div>

Source:

  %div#menu.content.light== Harsojo
  %div#id.class1.class2{row="1"}== Harsojo
  %div#id.class1== Harsojo
  %div#id.class2== Harsojo
  %div#id{row="1"}== Harsojo
  %div#id== Harsojo
  %div.class1.class2{row="1"}== Harsojo
  %div.class2.class1{row="1"}== Harsojo
  %div.class1{row="1"}== Harsojo
  %div.class2{row="1"}== Harsojo
  %div.class1== Harsojo
  %div.class2== Harsojo
  %div{row="1"}== Harsojo
    
result:

  <div id="menu" class="content light"><%= "Harsojo" %></div>
  <div id="id" class="class1 class2" row="1"><%= "Harsojo" %></div>
  <div id="id" class="class1"><%= "Harsojo" %></div>
  <div id="id" class="class2"><%= "Harsojo" %></div>
  <div id="id" row="1"><%= "Harsojo" %></div>
  <div id="id"><%= "Harsojo" %></div>
  <div class="class1 class2" row="1"><%= "Harsojo" %></div>
  <div class="class2 class1" row="1"><%= "Harsojo" %></div>
  <div class="class1" row="1"><%= "Harsojo" %></div>
  <div class="class2" row="1"><%= "Harsojo" %></div>
  <div class="class1"><%= "Harsojo" %></div>
  <div class="class2"><%= "Harsojo" %></div>
  <div row="1"><%= "Harsojo" %></div>

=== # or . Shortcut for DIV Tag
As you can see on the example above, alot of command begin with "%div" and it spoted
as duplicated and need to refactor :(, luckly you can ommit that tag ("%div"), 
to just write id or class as a HAML command.
 
==== # div formating with attribute id

  #main
    %ul#menu.main_side
      %li.hot{line="1"} List
      %li.hot{line="2"} New
    
result:

  <div id="main">
    <ul id="menu" class="main_side">
      <li line="1" class="hot">List</li>
      <li line="2" class="hot">New</li>
    </ul>
  </div>

==== . div formating with attribute class

  .content
    %ul#menu.main_side
      %li.hot{line="1"} List
      %li.hot{line="2"} New
      
result:

  <div class="content">
    <ul id="menu" class="main_side">
      <li line="1" class="hot">List</li>
      <li line="2" class="hot">New</li>
    </ul>
  </div>

==== Other Sample for Shortcut of DIV

  #menu.content.light/
  #id.class1.class2{row="1"}/
  #id.class1/
  #id.class2/
  #id{row="1"}/
  #id/
  .class1.class2{row="1"}/
  .class2.class1{row="1"}/
  .class1{row="1"}/
  .class2{row="1"}/
  .class1/
  .class2/
    
result:

  <div id="menu" class="content light"/>
  <div id="id" class="class1 class2" row="1"/>
  <div id="id" class="class1"/>
  <div id="id" class="class2"/>
  <div id="id" row="1"/>
  <div id="id"/>
  <div class="class1 class2" row="1"/>
  <div class="class2 class1" row="1"/>
  <div class="class1" row="1"/>
  <div class="class2" row="1"/>
  <div class="class1"/>
  <div class="class2"/>

=== \  line text / no parsing

when line text begin with \, \ will be ommited and the rest of line will become
a plain text no parsing to this line.

=== -  translate to Ruby code

this is a shortcut that after "-", it put inside of "<% %>"

=== =  translate to Ruby code

this is a shortcut that after "=", it put inside of "<%= %>"

==== == translate to Ruby String

this is a shortcut that after "=", it put inside of "<%=\" \"%>"

=== -# block remark / comment not include on result 
 
line inside block of indentation (children of) will become a remark / comment
the result does not have this block 

=== -! block not parse
 
line inside block of indentation (children-tag) will not be parse, this is usefull
for some block no need to parse ex: javascript.